import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { toast } from "react-toastify";
import ApperIcon from "@/components/ApperIcon";
import Button from "@/components/atoms/Button";
import Card from "@/components/atoms/Card";
import Loading from "@/components/ui/Loading";
import Error from "@/components/ui/Error";
import pillarService from "@/services/api/pillarService";
import responseService from "@/services/api/responseService";
import businessProfileService from "@/services/api/businessProfileService";

const ExportCharter = ({ currentUser }) => {
  const [pillars, setPillars] = useState([]);
  const [responses, setResponses] = useState([]);
  const [businessProfile, setBusinessProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [exportLoading, setExportLoading] = useState(false);

  useEffect(() => {
    loadExportData();
  }, [currentUser.id]);

  const loadExportData = async () => {
    try {
      setLoading(true);
      setError("");
      
      const [pillarsData, responsesData, profileData] = await Promise.all([
        pillarService.getAll(),
        responseService.getUserResponses(currentUser.id),
        businessProfileService.getByUserId(currentUser.id)
      ]);
      
      setPillars(pillarsData);
      setResponses(responsesData);
      setBusinessProfile(profileData);
    } catch (err) {
      setError("Failed to load charter data. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const calculateCompletion = () => {
    const totalQuestions = pillars.reduce((sum, pillar) => sum + pillar.questions.length, 0);
    const answeredQuestions = responses.reduce((sum, response) => {
      return sum + Object.values(response.responses || {}).filter(r => r && r.trim()).length;
    }, 0);
    
    return totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;
  };

  const generateCharterContent = () => {
    let content = `
# ${businessProfile?.businessName || "Family Business"} Charter

## Business Profile
- **Business Name**: ${businessProfile?.businessName || "N/A"}
- **Owner**: ${currentUser.fullName}
- **Position**: ${businessProfile?.position || "N/A"}
- **Business Type**: ${businessProfile?.businessType || "N/A"}
- **Years in Business**: ${businessProfile?.yearsInBusiness || "N/A"}
- **Location**: ${businessProfile?.city || "N/A"}, ${businessProfile?.country || "N/A"}

---

`;

    pillars.forEach((pillar) => {
      const pillarResponse = responses.find(r => r.pillarId === pillar.Id);
      content += `## ${pillar.title}\n\n`;
      
      pillar.questions.forEach((question) => {
        const answer = pillarResponse?.responses?.[`question_${question.Id}`] || "No response provided.";
        content += `**${question.text}**\n\n${answer}\n\n`;
      });
      
      content += "---\n\n";
    });

    content += `
## Charter Summary

This family business charter was created on ${new Date().toLocaleDateString()} using the Charter Craft platform. It represents our family's commitment to building a sustainable and purpose-driven business that serves multiple generations.

### Key Commitments:
- Maintain our core values and purpose
- Honor family relationships while pursuing business excellence
- Plan thoughtfully for succession and future ownership
- Address challenges proactively and with unity

---

*Generated by Charter Craft - Family Business Charter Builder*
`;

    return content;
  };

  const exportToPDF = async () => {
    setExportLoading(true);
    
    try {
      // Simulate PDF generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const content = generateCharterContent();
      const blob = new Blob([content], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `${businessProfile?.businessName || "Family-Business"}-Charter.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast.success("Charter exported successfully!");
    } catch (error) {
      toast.error("Failed to export charter. Please try again.");
    } finally {
      setExportLoading(false);
    }
  };

  const exportToWord = async () => {
    setExportLoading(true);
    
    try {
      // Simulate Word document generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const content = generateCharterContent();
      const blob = new Blob([content], { type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `${businessProfile?.businessName || "Family-Business"}-Charter.docx`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast.success("Charter exported as Word document!");
    } catch (error) {
      toast.error("Failed to export charter. Please try again.");
    } finally {
      setExportLoading(false);
    }
  };

  if (loading) return <Loading />;
  if (error) return <Error message={error} onRetry={loadExportData} />;

  const completionPercentage = calculateCompletion();
  const isComplete = completionPercentage === 100;

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-16 h-16 bg-gradient-to-br from-accent-500 to-accent-600 rounded-xl flex items-center justify-center">
            <ApperIcon name="Download" size={32} className="text-white" />
          </div>
          
          <div>
            <h1 className="text-3xl font-bold text-gray-900 font-display">
              Export Your Charter
            </h1>
            <p className="text-gray-600">
              Download your completed family business charter as a PDF or Word document.
            </p>
          </div>
        </div>
      </motion.div>

      {/* Charter Status */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="mb-8"
      >
        <Card glass className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-gray-900 font-display">
              Charter Completion Status
            </h2>
            
            <div className={`px-4 py-2 rounded-full text-sm font-medium ${
              isComplete 
                ? "bg-gradient-to-r from-accent-100 to-accent-200 text-accent-800"
                : "bg-gradient-to-r from-yellow-100 to-orange-200 text-orange-800"
            }`}>
              {isComplete ? "Complete" : "In Progress"}
            </div>
          </div>
          
          <div className="space-y-4">
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">Overall Progress</span>
              <span className="font-medium text-gray-900">{Math.round(completionPercentage)}%</span>
            </div>
            
            <div className="w-full bg-gray-200 rounded-full h-3">
              <motion.div
                className={`h-3 rounded-full ${
                  isComplete 
                    ? "bg-gradient-to-r from-accent-500 to-accent-600"
                    : "bg-gradient-to-r from-primary-500 to-primary-600"
                }`}
                initial={{ width: 0 }}
                animate={{ width: `${completionPercentage}%` }}
                transition={{ duration: 0.8 }}
              />
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
              {pillars.map((pillar) => {
                const pillarResponse = responses.find(r => r.pillarId === pillar.Id);
                const pillarComplete = pillarResponse?.isComplete || false;
                
                return (
                  <div key={pillar.Id} className="text-center">
                    <div className={`w-12 h-12 mx-auto rounded-full flex items-center justify-center mb-2 ${
                      pillarComplete 
                        ? "bg-gradient-to-br from-accent-500 to-accent-600 text-white"
                        : "bg-gray-200 text-gray-500"
                    }`}>
                      <ApperIcon 
                        name={pillarComplete ? "Check" : pillar.icon} 
                        size={20} 
                      />
                    </div>
                    <p className="text-xs text-gray-600">{pillar.title}</p>
                  </div>
                );
              })}
            </div>
          </div>
        </Card>
      </motion.div>

      {/* Export Options */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <Card className="p-8">
          <h2 className="text-xl font-semibold text-gray-900 mb-6 font-display">
            Export Options
          </h2>
          
          {!isComplete && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
              <div className="flex items-start space-x-3">
                <ApperIcon name="AlertTriangle" size={20} className="text-yellow-600 mt-0.5" />
                <div>
                  <h4 className="text-sm font-medium text-yellow-900 mb-1">
                    Charter Incomplete
                  </h4>
                  <p className="text-sm text-yellow-700">
                    You can export your charter now, but some sections may be incomplete. 
                    For the best results, complete all four pillars before exporting.
                  </p>
                </div>
              </div>
            </div>
          )}
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* PDF Export */}
            <motion.div
              whileHover={{ scale: 1.02 }}
              className="border-2 border-gray-200 rounded-xl p-6 hover:border-primary-300 transition-colors duration-200"
            >
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-red-500 to-red-600 rounded-lg flex items-center justify-center">
                  <ApperIcon name="FileText" size={24} className="text-white" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 font-display">
                    PDF Document
                  </h3>
                  <p className="text-sm text-gray-600">
                    Professional format, easy to share
                  </p>
                </div>
              </div>
              
              <ul className="text-sm text-gray-600 mb-6 space-y-1">
                <li className="flex items-center space-x-2">
                  <ApperIcon name="Check" size={16} className="text-accent-500" />
                  <span>Formatted for printing</span>
                </li>
                <li className="flex items-center space-x-2">
                  <ApperIcon name="Check" size={16} className="text-accent-500" />
                  <span>Preserves layout</span>
                </li>
                <li className="flex items-center space-x-2">
                  <ApperIcon name="Check" size={16} className="text-accent-500" />
                  <span>Easy to share</span>
                </li>
              </ul>
              
              <Button
                onClick={exportToPDF}
                loading={exportLoading}
                icon="Download"
                className="w-full"
              >
                Export as PDF
              </Button>
            </motion.div>

            {/* Word Export */}
            <motion.div
              whileHover={{ scale: 1.02 }}
              className="border-2 border-gray-200 rounded-xl p-6 hover:border-primary-300 transition-colors duration-200"
            >
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <ApperIcon name="FileText" size={24} className="text-white" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 font-display">
                    Word Document
                  </h3>
                  <p className="text-sm text-gray-600">
                    Editable format for customization
                  </p>
                </div>
              </div>
              
              <ul className="text-sm text-gray-600 mb-6 space-y-1">
                <li className="flex items-center space-x-2">
                  <ApperIcon name="Check" size={16} className="text-accent-500" />
                  <span>Fully editable</span>
                </li>
                <li className="flex items-center space-x-2">
                  <ApperIcon name="Check" size={16} className="text-accent-500" />
                  <span>Add additional content</span>
                </li>
                <li className="flex items-center space-x-2">
                  <ApperIcon name="Check" size={16} className="text-accent-500" />
                  <span>Collaborate with team</span>
                </li>
              </ul>
              
              <Button
                onClick={exportToWord}
                loading={exportLoading}
                icon="Download"
                variant="secondary"
                className="w-full"
              >
                Export as Word
              </Button>
            </motion.div>
          </div>
          
          <div className="mt-8 p-4 bg-gray-50 rounded-lg">
            <p className="text-sm text-gray-600 leading-relaxed">
              <strong>Note:</strong> Your exported charter will include all completed responses 
              organized by the four pillars framework. This document serves as a draft foundation 
              for your family business charter and can be further refined with your family and advisors.
            </p>
          </div>
        </Card>
      </motion.div>
    </div>
  );
};

export default ExportCharter;